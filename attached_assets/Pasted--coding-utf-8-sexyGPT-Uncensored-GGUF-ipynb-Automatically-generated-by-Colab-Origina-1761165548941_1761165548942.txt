# -*- coding: utf-8 -*-
"""sexyGPT-Uncensored-GGUF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//huggingface.co/tensorblock/sexyGPT-Uncensored-GGUF.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install requests python-dotenv

import os
from dotenv import load_dotenv
# import requests # We will no longer use the requests library
from openai import OpenAI
from google.colab import userdata # Import userdata to access Colab secrets

load_dotenv()

# Using the API key provided by the user directly for testing purposes.
# IMPORTANT: It is recommended to use Colab secrets or environment variables
# for storing API keys securely in a production environment.
OPENROUTER_API_KEY = "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"


if not OPENROUTER_API_KEY:
    print("OpenRouter API key not found. Make sure it is set in Colab secrets or environment variables.")
    # Exit or raise an error since the API key is required
    raise ValueError("OpenRouter API key is not set.")
else:
    print("OpenRouter API key loaded successfully.")

# Initialize the OpenAI client with the OpenRouter base URL
client = OpenAI(
  base_url="https://openrouter.ai/api/v1",
  api_key=OPENROUTER_API_KEY,
)


def generate_response(user_input, history):
    """
    Sends user input and chat history to the OpenRouter API using the openai library
    and returns the chatbot's response.

    Args:
        user_input (str): The user's current input.
        history (list): A list of dictionaries representing the chat history.

    Returns:
        str: The chatbot's response or an error message.
    """
    try:
        completion = client.chat.completions.create(
          extra_headers={
            "HTTP-Referer": "<YOUR_SITE_URL>", # Optional. Site URL for rankings on openrouter.ai.
            "X-Title": "<YOUR_SITE_NAME>", # Optional. Site title for rankings on openrouter.ai.
          },
          extra_body={},
          model="cognitivecomputations/dolphin-mistral-24b-venice-edition:free",
          messages=history + [{"role": "user", "content": user_input}]
        )
        chatbot_reply = completion.choices[0].message.content
        return chatbot_reply

    except Exception as e:
        print(f"Error during API request: {e}")
        return "An error occurred while generating the response."


history = []

initial_context = [
    {"role": "system", "content": "You are my girlfriend whose name is geetika"},
    {"role": "user", "content": "Act as my girlfriend, calling me late night to have sex chat, make sure to keep the conversation as natural as possible and no longer messege."}
]

history.extend(initial_context)

print("Initial context and history set up.")


while True:
    user_input = input("You: ")
    if user_input.lower() in ["quit", "exit"]:
        print("Chatbot: Goodbye!")
        break

    chatbot_response = generate_response(user_input, history)
    print(f"Chatbot: {chatbot_response}")

    # Only append valid responses to history
    if "An error occurred" not in chatbot_response:
        history.append({"role": "user", "content": user_input})
        history.append({"role": "assistant", "content": chatbot_response})